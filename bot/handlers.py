from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import text

from app.repositories import (
    get_or_create_user, set_user_name, set_subscribed, log_message
)
from app.dynamic_products import list_existing_category_tables, PRODUCTS_PREFIX, table_name_for_category
from .keyboards import main_kb

router = Router()

class NameState(StatesGroup):
    waiting = State()

class CatState(StatesGroup):
    waiting = State()

def pretty_cat_from_table(t: str) -> str:
    return t[len(PRODUCTS_PREFIX):].replace("_", " ").title()

@router.message(CommandStart())
async def start(message: Message, state: FSMContext, session: AsyncSession):
    u = await get_or_create_user(session, message.from_user.id, message.from_user.username)
    await log_message(session, message.from_user.id, "in", message.text or "")
    if not u.display_name:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è.")
        await state.set_state(NameState.waiting)
        return
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {u.display_name}! ‚ú®", reply_markup=main_kb(u.subscribed))

@router.message(NameState.waiting)
async def set_name(message: Message, state: FSMContext, session: AsyncSession):
    nm = (message.text or "").strip()
    if len(nm) < 2:
        await message.answer("–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    await set_user_name(session, message.from_user.id, nm)
    await state.clear()
    await message.answer(f"–ë—É–¥—É –∑–≤–∞—Ç—å –≤–∞—Å: <b>{nm}</b>.")

@router.message(F.text == "üõí –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã")
async def show_last_from_all(message: Message, session: AsyncSession):
    tables = await list_existing_category_tables(session)
    if not tables:
        return await message.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç. –ù–∞–∂–º–∏—Ç–µ ¬´üîÅ –û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ (–ø–∞—Ä—Å–∏–Ω–≥)¬ª.")
    lines = []
    for t in sorted(tables):
        res = await session.execute(text(f'SELECT title, price, url FROM "{t}" ORDER BY id DESC LIMIT 5'))
        rows = res.fetchall()
        if not rows:
            continue
        lines.append(f"üîπ <b>{pretty_cat_from_table(t)}</b>")
        for title, price, url in rows:
            part = f"‚Ä¢ <b>{title}</b>\n   –¶–µ–Ω–∞: {price}"
            if url: part += f"\n   {url}"
            lines.append(part)
        lines.append("")
    await message.answer("\n".join(lines)[:4096] if lines else "–¢–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç.")

@router.message(F.text == "üìÇ –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def ask_category(message: Message, state: FSMContext, session: AsyncSession):
    tables = await list_existing_category_tables(session)
    if not tables:
        return await message.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.")
    cats = [pretty_cat_from_table(t) for t in sorted(tables)]
    await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n" + "\n".join(f"‚Ä¢ {c}" for c in cats) + "\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    await state.set_state(CatState.waiting)

@router.message(CatState.waiting)
async def show_by_category(message: Message, state: FSMContext, session: AsyncSession):
    name = (message.text or "").strip()
    await state.clear()
    tname = table_name_for_category(name)
    tables = await list_existing_category_tables(session)
    if tname not in tables:
        return await message.answer("–¢–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç.")
    res = await session.execute(text(f'SELECT title, price, url FROM "{tname}" ORDER BY id DESC LIMIT 20'))
    rows = res.fetchall()
    if not rows:
        return await message.answer("–¢–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç.")
    lines = [f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{name}</b>", ""]
    for title, price, url in rows:
        part = f"‚Ä¢ <b>{title}</b>\n   –¶–µ–Ω–∞: {price}"
        if url: part += f"\n   {url}"
        lines.append(part)
    await message.answer("\n\n".join(lines)[:4096])

@router.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è")
async def rename(message: Message, state: FSMContext):
    await message.answer("–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")
    await state.set_state(NameState.waiting)

@router.message(F.text == "üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")
async def sub(message: Message, session: AsyncSession):
    await set_subscribed(session, message.from_user.id, True)
    await message.answer("–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫—É ‚úÖ")

@router.message(F.text == "üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è")
async def unsub(message: Message, session: AsyncSession):
    await set_subscribed(session, message.from_user.id, False)
    await message.answer("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∏ ‚ùå")

@router.message(F.text == "üîÅ –û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ (–ø–∞—Ä—Å–∏–Ω–≥)")
async def manual_refresh(message: Message, session: AsyncSession):
    from app.scheduler import _daily_scrape_full_replace
    from app.config import load_config
    await message.answer("‚è≥ –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–∞–ª–æ–≥ (–ø–æ–ª–Ω–∞—è –∑–∞–º–µ–Ω–∞)‚Ä¶")
    try:
        cfg = load_config()
        await _daily_scrape_full_replace(cfg)
        await message.answer("–ì–æ—Ç–æ–≤–æ! –ö–∞—Ç–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ config.yaml.")
